# Notice the v1beta2 version
apiVersion: backstage.io/v1beta2
kind: Template

# some metadata about the template itself
metadata:
  name: v1beta2-demo
  title: Test Template template
  description: scaffolder v1beta2 template demo

spec:
  owner: kcoleman731
  type: service
  

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Fill in some steps
      required:
        - component_id
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
        test_inupt:
          title: Test Input
          type: string
          description: Input for testing.
        project_short_description:
          title: Description
          type: string
          description: Description of the component
        docker_image:
          title: Docker Image
          type: string
          description: The docker base image to use when running the service
          default: alpine-base-image:latest
        docker_build_image:
          title: Docker Build Image
          type: string
          description: The docker base image to use when building the service
          default: golang
        docker_build_image_version:
          title: Docker Build Image Version
          description: The image version to use when building the service
          type: string
          enum:
            - alpine
          default: alpine
        use_logrus_logging:
          title: Enable Logrus Logging (https://github.com/sirupsen/logrus)
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_viper_config:
          title: Enable Viper Config (https://github.com/spf13/viper)
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_docker:
          title: Enable Docker
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_cobra_cmd:
          title: Enable Cobra CLI Tools (https://github.com/spf13/cobra)
          type: string
          enum:
            - "y"
            - "n"
          default: "y"
        use_ci:
          title: Add CI
          description: Add a CI config to the repo, Gitub Actions, Circle or Travis are the only supported right now
          type: string
          enum:
            - github
            - travis
            - circle
            - none
          default: github
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:cookiecutter
      input:
        url: "https://github.com/kcoleman731/cookiecutter-golang/"
        targetPath: '.'
        copyWithoutRender:
          - 'template.yaml'
          - 'tests/test_cookiecutter_generation.py'
        values:
          owner: 'kcoleman731'
          name: '{{ parameters.component_id }}'
          storePath: '{{ parameters.component_id }}'
          github_username: 'kcoleman731'
          component_id: '{{ parameters.component_id }}'
          project_short_description: '{{ parameters.project_short_description }}'
          docker_hub_username: 'kcoleman731'
          docker_image: '{{ parameters.docker_image }}'
          docker_build_image: '{{ parameters.docker_build_image }}'
          docker_build_image_version: '{{ parameters.docker_build_image_version }}'
          use_logrus_logging: '{{ parameters.use_logrus_logging }}'
          use_viper_config: '{{ parameters.use_viper_config }}'
          use_cobra_cmd: '{{ parameters.use_cobra_cmd }}'
          use_ci: '{{ parameters.use_ci }}'
          use_docker: '{{ parameters.use_docker }}'
          go_mod_or_dep: 'y'
          use_git: 'y'


    - id: fetch-docs
      name: Fetch Docs
      action: fetch:plain
      input:
        targetPath: ./community
        url: https://github.com/backstage/community/tree/main/backstage-community-sessions
        
    - id: publish
      name: Publish
      action: publish:github
      input:
        sourcePath: '.'
        allowedHosts: ['github.com']
        description: 'This is {{ parameters.component_id }}'
        repoUrl: '{{ parameters.repoUrl }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '{{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  # some outputs which are saved along with the job for use in the frontend
  output:
    remoteUrl: '{{ steps.publish.output.remoteUrl }}'
    entityRef: '{{ steps.register.output.entityRef }}'